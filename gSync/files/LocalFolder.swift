import Foundation

/// Структура для представления узла в иерархии локальных папок на устройстве.
/// - Логика: Этот модуль моделирует локальную папку или файл в файловой системе устройства, включая идентификатор, путь, имя, тип (папка или файл), дочерние элементы, флаг загрузки и MD5-хэш. Используется в `FolderManager` для построения дерева файловой системы и в `FolderServer` для отслеживания состояния синхронизации. Реализует `Codable` для сериализации, что позволяет сохранять состояние локальных папок.
/// - Особенности: Поддерживает рекурсивную структуру через `children`. Содержит дополнительные поля (`isUploaded`, `md5Checksum`) для управления синхронизацией, что делает её более функциональной по сравнению с `RemoteFolder`. Инициализатор предоставляет значения по умолчанию, упрощая создание экземпляров. Зависит только от Foundation.
/// - Архитектурные мысли: Структура хорошо спроектирована для задач синхронизации, так как включает ключевые метаданные (`md5Checksum`, `isUploaded`). Однако отсутствие проверки целостности данных (например, валидации пути) может привести к ошибкам при работе с некорректными файловыми системами. Как архитектор, я бы предложил добавить валидацию в инициализатор или отдельный метод, но это потребует изменения функционала, поэтому оставляю как заметку. Также стоит рассмотреть добавление `Equatable` для упрощения сравнения экземпляров.
struct LocalFolder: Codable {
    
    /// Уникальный идентификатор локальной папки или файла.
    /// - Генерируется автоматически через `UUID()` и используется для отслеживания в `FolderServer`.
    let id: UUID
    
    /// Полный путь к папке или файлу в локальной файловой системе.
    /// - Например, `/Volumes/big_boy/_dubai/test/per3.mp4`.
    let path: String
    
    /// Имя папки или файла.
    /// - Извлекается из пути, например, `per3.mp4` или `test`.
    let name: String
    
    /// Флаг, указывающий, является ли элемент папкой или файлом.
    /// - `true` для папок, `false` для файлов.
    let isDirectory: Bool
    
    /// Опциональный массив дочерних локальных папок или файлов.
    /// - Используется для построения рекурсивной иерархии; `nil` для файлов или пустых папок.
    var children: [LocalFolder]?
    
    /// Флаг, указывающий, был ли элемент загружен в облако.
    /// - По умолчанию `false`, обновляется в `FolderServer.markFileAsUploaded`.
    var isUploaded: Bool
    
    /// MD5-хэш содержимого файла.
    /// - Используется для проверки изменений файла; `nil` для папок или необработанных файлов.
    var md5Checksum: String?
    
    /// Инициализатор структуры с параметрами по умолчанию.
    /// - Parameters:
    ///   - id: Уникальный идентификатор (по умолчанию новый `UUID()`).
    ///   - path: Полный путь к элементу.
    ///   - name: Имя элемента.
    ///   - isDirectory: Тип элемента (папка или файл).
    ///   - children: Дочерние элементы (по умолчанию `nil`).
    ///   - isUploaded: Статус загрузки (по умолчанию `false`).
    ///   - md5Checksum: MD5-хэш (по умолчанию `nil`).
    init(id: UUID = UUID(), path: String, name: String, isDirectory: Bool, children: [LocalFolder]? = nil, isUploaded: Bool = false, md5Checksum: String? = nil) {
        self.id = id
        self.path = path
        self.name = name
        self.isDirectory = isDirectory
        self.children = children
        self.isUploaded = isUploaded
        self.md5Checksum = md5Checksum
    }
}
